
Button_Harici_Kesme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000788  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000910  08000918  00010918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000910  08000910  00010910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000914  08000914  00010914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010918  2**0
                  CONTENTS
  7 .bss          00000030  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000030  20000030  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010918  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002c35  00000000  00000000  00010948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000b80  00000000  00000000  0001357d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000003e0  00000000  00000000  00014100  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000358  00000000  00000000  000144e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001798  00000000  00000000  00014838  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001750  00000000  00000000  00015fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00017720  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000eac  00000000  00000000  0001779c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00018648  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080008f8 	.word	0x080008f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080008f8 	.word	0x080008f8

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000298:	4b34      	ldr	r3, [pc, #208]	; (800036c <EXTI_Init+0xe0>)
 800029a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	799b      	ldrb	r3, [r3, #6]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d04f      	beq.n	8000344 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80002a4:	4931      	ldr	r1, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a6:	4b31      	ldr	r3, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	43db      	mvns	r3, r3
 80002b0:	4013      	ands	r3, r2
 80002b2:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80002b4:	492d      	ldr	r1, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b6:	4b2d      	ldr	r3, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b8:	685a      	ldr	r2, [r3, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	43db      	mvns	r3, r3
 80002c0:	4013      	ands	r3, r2
 80002c2:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	791b      	ldrb	r3, [r3, #4]
 80002c8:	461a      	mov	r2, r3
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	4413      	add	r3, r2
 80002ce:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	6811      	ldr	r1, [r2, #0]
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	6812      	ldr	r2, [r2, #0]
 80002da:	430a      	orrs	r2, r1
 80002dc:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002de:	4923      	ldr	r1, [pc, #140]	; (800036c <EXTI_Init+0xe0>)
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <EXTI_Init+0xe0>)
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	43db      	mvns	r3, r3
 80002ea:	4013      	ands	r3, r2
 80002ec:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002ee:	491f      	ldr	r1, [pc, #124]	; (800036c <EXTI_Init+0xe0>)
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <EXTI_Init+0xe0>)
 80002f2:	68da      	ldr	r2, [r3, #12]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	43db      	mvns	r3, r3
 80002fa:	4013      	ands	r3, r2
 80002fc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	795b      	ldrb	r3, [r3, #5]
 8000302:	2b10      	cmp	r3, #16
 8000304:	d10e      	bne.n	8000324 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000306:	4919      	ldr	r1, [pc, #100]	; (800036c <EXTI_Init+0xe0>)
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <EXTI_Init+0xe0>)
 800030a:	689a      	ldr	r2, [r3, #8]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4313      	orrs	r3, r2
 8000312:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000314:	4915      	ldr	r1, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000318:	68da      	ldr	r2, [r3, #12]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4313      	orrs	r3, r2
 8000320:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000322:	e01d      	b.n	8000360 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <EXTI_Init+0xe0>)
 8000326:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	461a      	mov	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	4413      	add	r3, r2
 8000332:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	6811      	ldr	r1, [r2, #0]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	6812      	ldr	r2, [r2, #0]
 800033e:	430a      	orrs	r2, r1
 8000340:	601a      	str	r2, [r3, #0]
}
 8000342:	e00d      	b.n	8000360 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791b      	ldrb	r3, [r3, #4]
 8000348:	461a      	mov	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4413      	add	r3, r2
 800034e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	6811      	ldr	r1, [r2, #0]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	6812      	ldr	r2, [r2, #0]
 800035a:	43d2      	mvns	r2, r2
 800035c:	400a      	ands	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
}
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40013c00 	.word	0x40013c00

08000370 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000370:	b480      	push	{r7}
 8000372:	b087      	sub	sp, #28
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]
 800038a:	e076      	b.n	800047a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800038c:	2201      	movs	r2, #1
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	fa02 f303 	lsl.w	r3, r2, r3
 8000394:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	693b      	ldr	r3, [r7, #16]
 800039c:	4013      	ands	r3, r2
 800039e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80003a0:	68fa      	ldr	r2, [r7, #12]
 80003a2:	693b      	ldr	r3, [r7, #16]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d165      	bne.n	8000474 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	2103      	movs	r1, #3
 80003b2:	fa01 f303 	lsl.w	r3, r1, r3
 80003b6:	43db      	mvns	r3, r3
 80003b8:	401a      	ands	r2, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	791b      	ldrb	r3, [r3, #4]
 80003c6:	4619      	mov	r1, r3
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	fa01 f303 	lsl.w	r3, r1, r3
 80003d0:	431a      	orrs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	791b      	ldrb	r3, [r3, #4]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d003      	beq.n	80003e6 <GPIO_Init+0x76>
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	791b      	ldrb	r3, [r3, #4]
 80003e2:	2b02      	cmp	r3, #2
 80003e4:	d12e      	bne.n	8000444 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	689a      	ldr	r2, [r3, #8]
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	2103      	movs	r1, #3
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	43db      	mvns	r3, r3
 80003f6:	401a      	ands	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	689a      	ldr	r2, [r3, #8]
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	795b      	ldrb	r3, [r3, #5]
 8000404:	4619      	mov	r1, r3
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	fa01 f303 	lsl.w	r3, r1, r3
 800040e:	431a      	orrs	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	685a      	ldr	r2, [r3, #4]
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	b29b      	uxth	r3, r3
 800041c:	4619      	mov	r1, r3
 800041e:	2301      	movs	r3, #1
 8000420:	408b      	lsls	r3, r1
 8000422:	43db      	mvns	r3, r3
 8000424:	401a      	ands	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	683a      	ldr	r2, [r7, #0]
 8000430:	7992      	ldrb	r2, [r2, #6]
 8000432:	4611      	mov	r1, r2
 8000434:	697a      	ldr	r2, [r7, #20]
 8000436:	b292      	uxth	r2, r2
 8000438:	fa01 f202 	lsl.w	r2, r1, r2
 800043c:	b292      	uxth	r2, r2
 800043e:	431a      	orrs	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	68da      	ldr	r2, [r3, #12]
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	b29b      	uxth	r3, r3
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	2103      	movs	r1, #3
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	43db      	mvns	r3, r3
 8000456:	401a      	ands	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	68da      	ldr	r2, [r3, #12]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	79db      	ldrb	r3, [r3, #7]
 8000464:	4619      	mov	r1, r3
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	fa01 f303 	lsl.w	r3, r1, r3
 800046e:	431a      	orrs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	3301      	adds	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	2b0f      	cmp	r3, #15
 800047e:	d985      	bls.n	800038c <GPIO_Init+0x1c>
    }
  }
}
 8000480:	bf00      	nop
 8000482:	371c      	adds	r7, #28
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	460b      	mov	r3, r1
 8000496:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	887a      	ldrh	r2, [r7, #2]
 800049c:	831a      	strh	r2, [r3, #24]
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
	...

080004ac <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	460b      	mov	r3, r1
 80004b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004b8:	78fb      	ldrb	r3, [r7, #3]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d006      	beq.n	80004cc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80004be:	490a      	ldr	r1, [pc, #40]	; (80004e8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80004ca:	e006      	b.n	80004da <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80004cc:	4906      	ldr	r1, [pc, #24]	; (80004e8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	43db      	mvns	r3, r3
 80004d6:	4013      	ands	r3, r2
 80004d8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40023800 	.word	0x40023800

080004ec <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80004f8:	78fb      	ldrb	r3, [r7, #3]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d006      	beq.n	800050c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80004fe:	490a      	ldr	r1, [pc, #40]	; (8000528 <RCC_APB2PeriphClockCmd+0x3c>)
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <RCC_APB2PeriphClockCmd+0x3c>)
 8000502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4313      	orrs	r3, r2
 8000508:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800050a:	e006      	b.n	800051a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800050c:	4906      	ldr	r1, [pc, #24]	; (8000528 <RCC_APB2PeriphClockCmd+0x3c>)
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <RCC_APB2PeriphClockCmd+0x3c>)
 8000510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	43db      	mvns	r3, r3
 8000516:	4013      	ands	r3, r2
 8000518:	644b      	str	r3, [r1, #68]	; 0x44
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40023800 	.word	0x40023800

0800052c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800052c:	b490      	push	{r4, r7}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	460a      	mov	r2, r1
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	4613      	mov	r3, r2
 800053a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	f003 0303 	and.w	r3, r3, #3
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	220f      	movs	r2, #15
 800054a:	fa02 f303 	lsl.w	r3, r2, r3
 800054e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000550:	4916      	ldr	r1, [pc, #88]	; (80005ac <SYSCFG_EXTILineConfig+0x80>)
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	089b      	lsrs	r3, r3, #2
 8000556:	b2db      	uxtb	r3, r3
 8000558:	4618      	mov	r0, r3
 800055a:	4a14      	ldr	r2, [pc, #80]	; (80005ac <SYSCFG_EXTILineConfig+0x80>)
 800055c:	79bb      	ldrb	r3, [r7, #6]
 800055e:	089b      	lsrs	r3, r3, #2
 8000560:	b2db      	uxtb	r3, r3
 8000562:	3302      	adds	r3, #2
 8000564:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	43db      	mvns	r3, r3
 800056c:	401a      	ands	r2, r3
 800056e:	1c83      	adds	r3, r0, #2
 8000570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <SYSCFG_EXTILineConfig+0x80>)
 8000576:	79bb      	ldrb	r3, [r7, #6]
 8000578:	089b      	lsrs	r3, r3, #2
 800057a:	b2db      	uxtb	r3, r3
 800057c:	461c      	mov	r4, r3
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <SYSCFG_EXTILineConfig+0x80>)
 8000580:	79bb      	ldrb	r3, [r7, #6]
 8000582:	089b      	lsrs	r3, r3, #2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	3302      	adds	r3, #2
 8000588:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058c:	79f9      	ldrb	r1, [r7, #7]
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	f003 0303 	and.w	r3, r3, #3
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	fa01 f303 	lsl.w	r3, r1, r3
 800059a:	431a      	orrs	r2, r3
 800059c:	1ca3      	adds	r3, r4, #2
 800059e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc90      	pop	{r4, r7}
 80005aa:	4770      	bx	lr
 80005ac:	40013800 	.word	0x40013800

080005b0 <GPIO_Config>:
#include "stm32f4xx.h"
GPIO_InitTypeDef GPIO_InitStruct;
EXTI_InitTypeDef EXTI_InitStruct;
NVIC_InitTypeDef NVIC_InitStruct;

void GPIO_Config(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD , ENABLE);
 80005b4:	2101      	movs	r1, #1
 80005b6:	2008      	movs	r0, #8
 80005b8:	f7ff ff78 	bl	80004ac <RCC_AHB1PeriphClockCmd>
RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA , ENABLE);
 80005bc:	2101      	movs	r1, #1
 80005be:	2001      	movs	r0, #1
 80005c0:	f7ff ff74 	bl	80004ac <RCC_AHB1PeriphClockCmd>
RCC_APB2PeriphClockCmd(RCC_APB2ENR_SYSCFGEN,ENABLE);
 80005c4:	2101      	movs	r1, #1
 80005c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005ca:	f7ff ff8f 	bl	80004ec <RCC_APB2PeriphClockCmd>

GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <GPIO_Config+0x70>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	711a      	strb	r2, [r3, #4]
GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <GPIO_Config+0x70>)
 80005d6:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80005da:	601a      	str	r2, [r3, #0]
GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <GPIO_Config+0x70>)
 80005de:	2200      	movs	r2, #0
 80005e0:	719a      	strb	r2, [r3, #6]
GPIO_InitStruct.GPIO_PuPd =GPIO_PuPd_NOPULL;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <GPIO_Config+0x70>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	71da      	strb	r2, [r3, #7]
GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <GPIO_Config+0x70>)
 80005ea:	2203      	movs	r2, #3
 80005ec:	715a      	strb	r2, [r3, #5]

GPIO_Init(GPIOD , &GPIO_InitStruct);
 80005ee:	490c      	ldr	r1, [pc, #48]	; (8000620 <GPIO_Config+0x70>)
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <GPIO_Config+0x74>)
 80005f2:	f7ff febd 	bl	8000370 <GPIO_Init>

GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <GPIO_Config+0x70>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	711a      	strb	r2, [r3, #4]
GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <GPIO_Config+0x70>)
 80005fe:	2201      	movs	r2, #1
 8000600:	601a      	str	r2, [r3, #0]
GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <GPIO_Config+0x70>)
 8000604:	2200      	movs	r2, #0
 8000606:	719a      	strb	r2, [r3, #6]
GPIO_InitStruct.GPIO_PuPd =GPIO_PuPd_DOWN;
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <GPIO_Config+0x70>)
 800060a:	2202      	movs	r2, #2
 800060c:	71da      	strb	r2, [r3, #7]
GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <GPIO_Config+0x70>)
 8000610:	2203      	movs	r2, #3
 8000612:	715a      	strb	r2, [r3, #5]

GPIO_Init(GPIOA , &GPIO_InitStruct);
 8000614:	4902      	ldr	r1, [pc, #8]	; (8000620 <GPIO_Config+0x70>)
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <GPIO_Config+0x78>)
 8000618:	f7ff feaa 	bl	8000370 <GPIO_Init>


}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000001c 	.word	0x2000001c
 8000624:	40020c00 	.word	0x40020c00
 8000628:	40020000 	.word	0x40020000

0800062c <EXTI_Config>:
void delay(uint32_t time)
{
	while(time--);
}
void EXTI_Config(){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA , GPIO_PinSource0);
 8000630:	2100      	movs	r1, #0
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff ff7a 	bl	800052c <SYSCFG_EXTILineConfig>
	EXTI_InitStruct.EXTI_Line = EXTI_Line0;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <EXTI_Config+0x4c>)
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <EXTI_Config+0x4c>)
 8000640:	2201      	movs	r2, #1
 8000642:	719a      	strb	r2, [r3, #6]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <EXTI_Config+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	711a      	strb	r2, [r3, #4]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <EXTI_Config+0x4c>)
 800064c:	2208      	movs	r2, #8
 800064e:	715a      	strb	r2, [r3, #5]
	EXTI_Init(&EXTI_InitStruct);
 8000650:	4809      	ldr	r0, [pc, #36]	; (8000678 <EXTI_Config+0x4c>)
 8000652:	f7ff fe1b 	bl	800028c <EXTI_Init>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <EXTI_Config+0x50>)
 8000658:	2206      	movs	r2, #6
 800065a:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <EXTI_Config+0x50>)
 800065e:	2201      	movs	r2, #1
 8000660:	70da      	strb	r2, [r3, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0xFF;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <EXTI_Config+0x50>)
 8000664:	22ff      	movs	r2, #255	; 0xff
 8000666:	705a      	strb	r2, [r3, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x00;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <EXTI_Config+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStruct);
 800066e:	4803      	ldr	r0, [pc, #12]	; (800067c <EXTI_Config+0x50>)
 8000670:	f7ff fdaa 	bl	80001c8 <NVIC_Init>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000028 	.word	0x20000028
 800067c:	20000024 	.word	0x20000024

08000680 <main>:
		delay(1680000);
		EXTI_ClearITPendingBit(EXTI_Line0);
	}
}
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
GPIO_Config();
 8000684:	f7ff ff94 	bl	80005b0 <GPIO_Config>
EXTI_Config();
 8000688:	f7ff ffd0 	bl	800062c <EXTI_Config>
  while (1)
  {
	  GPIO_SetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 800068c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000690:	4801      	ldr	r0, [pc, #4]	; (8000698 <main+0x18>)
 8000692:	f7ff fefb 	bl	800048c <GPIO_SetBits>
 8000696:	e7f9      	b.n	800068c <main+0xc>
 8000698:	40020c00 	.word	0x40020c00

0800069c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800069c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006a2:	e003      	b.n	80006ac <LoopCopyDataInit>

080006a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80006a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006aa:	3104      	adds	r1, #4

080006ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006b4:	d3f6      	bcc.n	80006a4 <CopyDataInit>
  ldr  r2, =_sbss
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006b8:	e002      	b.n	80006c0 <LoopFillZerobss>

080006ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006bc:	f842 3b04 	str.w	r3, [r2], #4

080006c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006c4:	d3f9      	bcc.n	80006ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006c6:	f000 f841 	bl	800074c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ca:	f000 f8f1 	bl	80008b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ce:	f7ff ffd7 	bl	8000680 <main>
  bx  lr    
 80006d2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80006d8:	08000918 	.word	0x08000918
  ldr  r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80006e0:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80006e4:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80006e8:	20000030 	.word	0x20000030

080006ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC_IRQHandler>

080006ee <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000700:	e7fe      	b.n	8000700 <HardFault_Handler+0x4>

08000702 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000706:	e7fe      	b.n	8000706 <MemManage_Handler+0x4>

08000708 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800070c:	e7fe      	b.n	800070c <BusFault_Handler+0x4>

0800070e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000712:	e7fe      	b.n	8000712 <UsageFault_Handler+0x4>

08000714 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000750:	4a16      	ldr	r2, [pc, #88]	; (80007ac <SystemInit+0x60>)
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <SystemInit+0x60>)
 8000754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000760:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <SystemInit+0x64>)
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x64>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <SystemInit+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <SystemInit+0x64>)
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <SystemInit+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800077c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000780:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <SystemInit+0x64>)
 8000784:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <SystemInit+0x68>)
 8000786:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000788:	4a09      	ldr	r2, [pc, #36]	; (80007b0 <SystemInit+0x64>)
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <SystemInit+0x64>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000792:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <SystemInit+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800079a:	f000 f80d 	bl	80007b8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800079e:	4b03      	ldr	r3, [pc, #12]	; (80007ac <SystemInit+0x60>)
 80007a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007a4:	609a      	str	r2, [r3, #8]
#endif
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00
 80007b0:	40023800 	.word	0x40023800
 80007b4:	24003010 	.word	0x24003010

080007b8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80007c6:	4a36      	ldr	r2, [pc, #216]	; (80008a0 <SetSysClock+0xe8>)
 80007c8:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <SetSysClock+0xe8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <SetSysClock+0xe8>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3301      	adds	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d103      	bne.n	80007f0 <SetSysClock+0x38>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80007ee:	d1f0      	bne.n	80007d2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <SetSysClock+0xe8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80007fc:	2301      	movs	r3, #1
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	e001      	b.n	8000806 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d142      	bne.n	8000892 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800080c:	4a24      	ldr	r2, [pc, #144]	; (80008a0 <SetSysClock+0xe8>)
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <SetSysClock+0xe8>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000818:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <SetSysClock+0xec>)
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <SetSysClock+0xec>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000822:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000824:	4a1e      	ldr	r2, [pc, #120]	; (80008a0 <SetSysClock+0xe8>)
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <SetSysClock+0xe8>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800082c:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <SetSysClock+0xe8>)
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <SetSysClock+0xe8>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000836:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000838:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <SetSysClock+0xe8>)
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <SetSysClock+0xe8>)
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000842:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <SetSysClock+0xe8>)
 8000846:	4a18      	ldr	r2, [pc, #96]	; (80008a8 <SetSysClock+0xf0>)
 8000848:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <SetSysClock+0xe8>)
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <SetSysClock+0xe8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000854:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000856:	bf00      	nop
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <SetSysClock+0xe8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000860:	2b00      	cmp	r3, #0
 8000862:	d0f9      	beq.n	8000858 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <SetSysClock+0xf4>)
 8000866:	f240 7205 	movw	r2, #1797	; 0x705
 800086a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <SetSysClock+0xe8>)
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <SetSysClock+0xe8>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f023 0303 	bic.w	r3, r3, #3
 8000876:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000878:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <SetSysClock+0xe8>)
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <SetSysClock+0xe8>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f043 0302 	orr.w	r3, r3, #2
 8000882:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000884:	bf00      	nop
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <SetSysClock+0xe8>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	f003 030c 	and.w	r3, r3, #12
 800088e:	2b08      	cmp	r3, #8
 8000890:	d1f9      	bne.n	8000886 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000
 80008a8:	07405419 	.word	0x07405419
 80008ac:	40023c00 	.word	0x40023c00

080008b0 <__libc_init_array>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	4e0d      	ldr	r6, [pc, #52]	; (80008e8 <__libc_init_array+0x38>)
 80008b4:	4c0d      	ldr	r4, [pc, #52]	; (80008ec <__libc_init_array+0x3c>)
 80008b6:	1ba4      	subs	r4, r4, r6
 80008b8:	10a4      	asrs	r4, r4, #2
 80008ba:	2500      	movs	r5, #0
 80008bc:	42a5      	cmp	r5, r4
 80008be:	d109      	bne.n	80008d4 <__libc_init_array+0x24>
 80008c0:	4e0b      	ldr	r6, [pc, #44]	; (80008f0 <__libc_init_array+0x40>)
 80008c2:	4c0c      	ldr	r4, [pc, #48]	; (80008f4 <__libc_init_array+0x44>)
 80008c4:	f000 f818 	bl	80008f8 <_init>
 80008c8:	1ba4      	subs	r4, r4, r6
 80008ca:	10a4      	asrs	r4, r4, #2
 80008cc:	2500      	movs	r5, #0
 80008ce:	42a5      	cmp	r5, r4
 80008d0:	d105      	bne.n	80008de <__libc_init_array+0x2e>
 80008d2:	bd70      	pop	{r4, r5, r6, pc}
 80008d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008d8:	4798      	blx	r3
 80008da:	3501      	adds	r5, #1
 80008dc:	e7ee      	b.n	80008bc <__libc_init_array+0xc>
 80008de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008e2:	4798      	blx	r3
 80008e4:	3501      	adds	r5, #1
 80008e6:	e7f2      	b.n	80008ce <__libc_init_array+0x1e>
 80008e8:	08000910 	.word	0x08000910
 80008ec:	08000910 	.word	0x08000910
 80008f0:	08000910 	.word	0x08000910
 80008f4:	08000914 	.word	0x08000914

080008f8 <_init>:
 80008f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fa:	bf00      	nop
 80008fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008fe:	bc08      	pop	{r3}
 8000900:	469e      	mov	lr, r3
 8000902:	4770      	bx	lr

08000904 <_fini>:
 8000904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000906:	bf00      	nop
 8000908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090a:	bc08      	pop	{r3}
 800090c:	469e      	mov	lr, r3
 800090e:	4770      	bx	lr
